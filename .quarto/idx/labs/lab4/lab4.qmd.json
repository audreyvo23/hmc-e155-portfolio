{"title":"Lab 4: Digital Audio","markdown":{"yaml":{"title":"Lab 4: Digital Audio","author":"Audrey Vo","date":"9/30/24"},"headingText":"Main Goals","containsRefs":false,"markdown":"\n\nNumber of Hours Spent on Lab: 20 hours\n\n[GitHub Lab 3 Files](https://github.com/audreyvo23/e155-lab4)\n\nThe main goals of this lab was to drive a speaker from the MCU by enabling the I/O pins. In order to do so, the timer functionality needed to be implemented in order to create a square wave at the desired frequency/pitch and also indicate how long each note should be played for. Finally, a library from C needed to be written from scratch for the Timer to be implemented, which required getting familiar with the datasheet.\n\n## Design Approach\n\n### Delay Duration Design\nIn order to design the code for the delay, there were 2 functions written. One function intialized the delay timer, while the other function would use a timer to delay the code to the desired number of milliseconds. The value of the prescalar was sent to 39 in order to get a counting clock frequency of 100 kHz since the system's clock is at 4 MHz when it is set to the default MSI. The counter was also enabled and set to 0 during initialization.\n\n![Calculation to find the prescalar value for the timer](images/prescalercalc.png)\n\nNext, the delay function took in a pointer to a timer along with the desired delay time. This function first set the auto-reload register to 100*input delay in order to get the desired maximum counting value before resetting when the counting clock frequency is at 100 kHz. Next, the Counter and Capture/Compare 1 Interrupt flag values were set to 0. A while loop was then created to keep running until the Capture/Compare Interrupt flag is turned on, which is when the counter has a greater value than the ARR register.\n\n![Calculation to find the ARR value for the delay function](images/delayarr.png)\n\nUsing the equations for the arr value, the maximum and minimum delay values could be found by using the maximum and minimum values that the auto-reload register could hold. \n\n![Calculation to find the maximum delay duration](images/maxarr.png)\n\n![Calculation to find the minimum delay duration](images/minarr.png)\n\n### Pulse Width Modulator Design \nThe PWM design consisted of a function that initialized the PWM timer and a function that produced a square wave at the desired frequency. In the initialization funtion, the prescalar was also set to 39 in order to get a counting clock frequency of 100 kHz. The 100 kHz counter clock frequency ensured that our pitch output would remain within 1 percent of the desired pitch for frequencies between 220 and 1000 Hz. \n\n![Calculation to verify the accuracy of the output frequency](images/accuracycalc.png)\n\nIn addition, the auto-reload preload enable was set so that the ARR register is buffered. The Output Compare 1 Mode bits were set also set so that the PWM mode is set. The Capture Compare 1 Output enable and the Main Output Enable were also turned on so. Finally, the update generation was set so that the counter is reinitialized and the registers are updated. Lastly, the counter is then enabled for the timer. The output of this function was set to an alternate function in order to connect the timer value with the GPIO pins. \n\nFor the setPitch function, the ARR register was set to 100000/inputfrequency in order to get the desired number of counts for one period of the square wave.\nKnowing the maximum and minimum ARR values along wtih its relationship to the input frequency, the maximum and minimum frequency ranges can be calculated.\n\n![Calculation to find the ARR register value for the PWM output](images/pwmarr.png)\n\n![Calculation to find the maximum frequency](images/maxpitch.png)\n\n![Calculation to find the minimum frequency](images/minpitch.png)\n\nThe update generation was set so that the counter is reinitialized and the registers are updated. Lastly, the counter is then enabled for the timer. \n\n### Circuit Design\nThe circuit created consisted of a 10k potentiometer that took in the output of the PWM output and inputted the voltage drop into the LM386N amplifier. The LM386N was configured so that no gain was used, and its output was fed into the an 8 Ohm speaker. This configuration allowed for the volume to be controlled by adjusting the potentiometer and to limit current drawn from the GPIO pins. \n\n### Pin Assignment\n\n| variable| pin # |\n|---------|:------|\n| TIM16   |   A6  |  \n| TIM15   |   A9  |   \n\n: Pin assignment to MCU C Code\n\n![Full schematic with Led, Switch, and 7-segment display pin connections](images/schematiclab4.png)\n\n## Finished Lab \n{{< video https://www.youtube.com/watch?v=RmcU3kYlT80 >}}\n\n## Testing Approach\nIn order to test the design, I used an oscilloscope to measure the frequency of the output pitch and the output delay. If the delay was set to 10 ms, the frequency output is expected to be 50 Hz. Using the oscilloscope, this was the value I measured. For the output frequency, I set the pitch to a value of 250 Hz, and measured the output of the timer pin. As expected, I saw a value at about 248 Hz, which matches very closely to the 250 Hz. Thus, my circuit worked as desired.\n\n## Design Requirements\nAfter testing the design on the oscilloscope and in real-life, I can confirm the design meets all specs.\n\n\n","srcMarkdownNoYaml":"\n\nNumber of Hours Spent on Lab: 20 hours\n\n[GitHub Lab 3 Files](https://github.com/audreyvo23/e155-lab4)\n\n## Main Goals\nThe main goals of this lab was to drive a speaker from the MCU by enabling the I/O pins. In order to do so, the timer functionality needed to be implemented in order to create a square wave at the desired frequency/pitch and also indicate how long each note should be played for. Finally, a library from C needed to be written from scratch for the Timer to be implemented, which required getting familiar with the datasheet.\n\n## Design Approach\n\n### Delay Duration Design\nIn order to design the code for the delay, there were 2 functions written. One function intialized the delay timer, while the other function would use a timer to delay the code to the desired number of milliseconds. The value of the prescalar was sent to 39 in order to get a counting clock frequency of 100 kHz since the system's clock is at 4 MHz when it is set to the default MSI. The counter was also enabled and set to 0 during initialization.\n\n![Calculation to find the prescalar value for the timer](images/prescalercalc.png)\n\nNext, the delay function took in a pointer to a timer along with the desired delay time. This function first set the auto-reload register to 100*input delay in order to get the desired maximum counting value before resetting when the counting clock frequency is at 100 kHz. Next, the Counter and Capture/Compare 1 Interrupt flag values were set to 0. A while loop was then created to keep running until the Capture/Compare Interrupt flag is turned on, which is when the counter has a greater value than the ARR register.\n\n![Calculation to find the ARR value for the delay function](images/delayarr.png)\n\nUsing the equations for the arr value, the maximum and minimum delay values could be found by using the maximum and minimum values that the auto-reload register could hold. \n\n![Calculation to find the maximum delay duration](images/maxarr.png)\n\n![Calculation to find the minimum delay duration](images/minarr.png)\n\n### Pulse Width Modulator Design \nThe PWM design consisted of a function that initialized the PWM timer and a function that produced a square wave at the desired frequency. In the initialization funtion, the prescalar was also set to 39 in order to get a counting clock frequency of 100 kHz. The 100 kHz counter clock frequency ensured that our pitch output would remain within 1 percent of the desired pitch for frequencies between 220 and 1000 Hz. \n\n![Calculation to verify the accuracy of the output frequency](images/accuracycalc.png)\n\nIn addition, the auto-reload preload enable was set so that the ARR register is buffered. The Output Compare 1 Mode bits were set also set so that the PWM mode is set. The Capture Compare 1 Output enable and the Main Output Enable were also turned on so. Finally, the update generation was set so that the counter is reinitialized and the registers are updated. Lastly, the counter is then enabled for the timer. The output of this function was set to an alternate function in order to connect the timer value with the GPIO pins. \n\nFor the setPitch function, the ARR register was set to 100000/inputfrequency in order to get the desired number of counts for one period of the square wave.\nKnowing the maximum and minimum ARR values along wtih its relationship to the input frequency, the maximum and minimum frequency ranges can be calculated.\n\n![Calculation to find the ARR register value for the PWM output](images/pwmarr.png)\n\n![Calculation to find the maximum frequency](images/maxpitch.png)\n\n![Calculation to find the minimum frequency](images/minpitch.png)\n\nThe update generation was set so that the counter is reinitialized and the registers are updated. Lastly, the counter is then enabled for the timer. \n\n### Circuit Design\nThe circuit created consisted of a 10k potentiometer that took in the output of the PWM output and inputted the voltage drop into the LM386N amplifier. The LM386N was configured so that no gain was used, and its output was fed into the an 8 Ohm speaker. This configuration allowed for the volume to be controlled by adjusting the potentiometer and to limit current drawn from the GPIO pins. \n\n### Pin Assignment\n\n| variable| pin # |\n|---------|:------|\n| TIM16   |   A6  |  \n| TIM15   |   A9  |   \n\n: Pin assignment to MCU C Code\n\n![Full schematic with Led, Switch, and 7-segment display pin connections](images/schematiclab4.png)\n\n## Finished Lab \n{{< video https://www.youtube.com/watch?v=RmcU3kYlT80 >}}\n\n## Testing Approach\nIn order to test the design, I used an oscilloscope to measure the frequency of the output pitch and the output delay. If the delay was set to 10 ms, the frequency output is expected to be 50 Hz. Using the oscilloscope, this was the value I measured. For the output frequency, I set the pitch to a value of 250 Hz, and measured the output of the timer pin. As expected, I saw a value at about 248 Hz, which matches very closely to the 250 Hz. Thus, my circuit worked as desired.\n\n## Design Requirements\nAfter testing the design on the oscilloscope and in real-life, I can confirm the design meets all specs.\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"lab4.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","title":"Lab 4: Digital Audio","author":"Audrey Vo","date":"9/30/24"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}